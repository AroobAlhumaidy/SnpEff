#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Fetch a file
#-------------------------------------------------------------------------------
bool fetch(string url) {
	if( url.startsWith('ftp://') ) {
		sys $wget $url
		return true
	}

	base := url.baseName()
	if( base <- url ) {
		println "Downloading '$url' to '$base'"
		sys $wget $url
		return true
	}
	return false
}

#-------------------------------------------------------------------------------
# Download ENSEMBL genomes
#-------------------------------------------------------------------------------
void downloadEnsembl() {
	println "Download ENSEMBL $ensemblRelease"
	dir := "$dirDownload/ensembl_$ensemblRelease"
	dir.mkdir()
	dir.chdir()

	#---
	# Download all files
	#---
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Downloading ENSEMBL $ensemblRelease"

 		# Download GTF files (annotations)
 		task $wgetA "*.$ensemblRelease.gtf.gz" "ftp://ftp.ensembl.org/pub/release-$ensemblRelease/gtf/"
 
		# Download FASTA files (reference genomes)
		task $wgetA "*dna.toplevel.fa.gz,*cdna.all.fa.gz,*.pep.all.fa.gz" "ftp://ftp.ensembl.org/pub/release-$ensemblRelease/fasta/"

 		# Download regulation tracks
 		task $wgetA "*AnnotatedFeatures.gff.gz,*MotifFeatures.gff.gz" "ftp://ftp.ensembl.org/pub/release-$ensemblRelease/regulation/"

		wait

		# Mark as all downloads OK
		downloadOk.write("OK")
	}

	#---
	# Move files to propper structure in 'local data' dir
	#---
	configFile := "$dirSnpeff/snpEff.ENSEMBL_$ensemblRelease.config"
	if( !configFile.exists() ) {
		# Move downloaded files to current dir
		sys find ftp.ensembl.org -type f | xargs -I + $cp + .

		# Create data genomes dir
		"data/genomes".mkdir()

		# Move files
		println 'Copying files to data dir'
		string[] configLines
		for( string gtf : ".".dir("*.gtf.gz") ) {
			base := gtf.baseName('.gtf.gz')
			baseNoVer := base.removeExt()
			longName := base.split('\.').head()
			shortName := base.split('\.').tail().join('.')
			println "\t$shortName"

			fasta := "$baseNoVer.dna.toplevel.fa.gz"
			cds := "$baseNoVer.cdna.all.fa.gz"
			prot := "$baseNoVer.pep.all.fa.gz"

			# Copy files
			"data/$shortName".mkdir()
			if( "data/$shortName/genes.gtf.gz" <- gtf )		sys $cp $gtf data/$shortName/genes.gtf.gz
			if( "data/$shortName/cds.fa.gz" <- cds )		sys $cp $cds data/$shortName/cds.fa.gz
			if( "data/$shortName/protein.fa.gz" <- prot )	sys $cp $prot data/$shortName/protein.fa.gz
			if( "data/genomes/$shortName.fa.gz" <- fasta )	sys $cp $fasta data/genomes/$shortName.fa.gz

			# Append config lines
			configLines += "$shortName.genome : $longName"
			configLines += "$shortName.reference : ftp://ftp.ensembl.org/pub/release-$ensemblRelease/gtf/"
		}

		# Regulation tracks (human and mouse only)
		sys $cp ftp.ensembl.org/pub/release-$ensemblRelease/regulation/homo_sapiens/AnnotatedFeatures.gff.gz data/$GRCH.$ensemblRelease/regulation.gff.gz
		sys $cp ftp.ensembl.org/pub/release-$ensemblRelease/regulation/homo_sapiens/MotifFeatures.gff.gz data/$GRCH.$ensemblRelease/motif.gff.gz

		sys $cp ftp.ensembl.org/pub/release-$ensemblRelease/regulation/mus_musculus/AnnotatedFeatures.gff.gz data/$GRCM.$ensemblRelease/regulation.gff.gz
		sys $cp ftp.ensembl.org/pub/release-$ensemblRelease/regulation/mus_musculus/MotifFeatures.gff.gz data/$GRCM.$ensemblRelease/motif.gff.gz

		# Create config file
		println "Writing config file $configFile"
		configFile.write( configLines.join("\n") )
	}
}

#-------------------------------------------------------------------------------
# Download ENSEMBL genomes (BFMPP)
#-------------------------------------------------------------------------------
void downloadEnsemblBfmpp() {
	println "Download ENSEMBL BFMPP $ensemblBfmppRelease"
	dir := "$dirDownload/ensembl_bfmpp_$ensemblBfmppRelease"
	site := "ftp://ftp.ensemblgenomes.org"
	dir.mkdir()
	dir.chdir()

	#---
	# Download all files
	#---
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Downloading ENSEMBL (BFMPP) $ensemblBfmppRelease"

		#for(string org : [ 'bacteria', 'fungi', 'metazoa', 'misc_data', 'plants', 'protists'] ) {
		for(string org : [ 'protists'] ) {
			# Download GTF files (annotations)
			task $wgetA "*gtf.gz" "$site/pub/$org/release-$ensemblBfmppRelease/gtf/"
        
			# Download FASTA files (reference genomes)
			task $wgetA "*dna.toplevel.fa.gz" "$site/pub/$org/release-$ensemblBfmppRelease/fasta/"
		}
		wait

		# Mark as all downloads OK
		downloadOk.write("OK")
	}

	#---
	# Move files to propper structure in 'local data' dir
	#---
	configFile := "$dirSnpeff/snpEff.ENSEMBL_BFMPP_$ensemblRelease.config"
	if( !configFile.exists() ) {
		# Copy files to local dir
		sys find ftp.ensemblgenomes.org -type f | xargs -I + $cp + .

		# Move files
		println 'Copying files to data dir'
		string[] configLines
		for( string gtf : ".".dir("*.gtf.gz") ) {
			base := gtf.baseName('.gtf.gz')
			longName := base.split('\.').head()
			shortName := base.split('\.').tail().join('.')

			fasta := "$base.dna.toplevel.fa.gz"
			cds := "$base.cdna.all.fa.gz"
			prot := "$base.pep.all.fa.gz"
			println "\t$shortName"

			# Copy files
			"data/$shortName".mkdir()
			if( "data/$shortName/genes.gtf.gz" <- gtf )		sys $cp $gtf data/$shortName/genes.gtf.gz
			if( "data/$shortName/cds.fa.gz" <- cds )		sys $cp $cds data/$shortName/cds.fa.gz
			if( "data/$shortName/protein.fa.gz" <- prot )	sys $cp $prot data/$shortName/protein.fa.gz
			if( "data/genomes/$shortName.fa.gz" <- fasta )	sys $cp $fasta data/genomes/$shortName.fa.gz

			# Append config lines
			configLines += "$shortName.genome : $longName"
			configLines += "$shortName.reference : $site"
		}

		# Create config file
		println "Writing config file $configFile"
		configFile.write( configLines.join("\n") )
	}
}

#-------------------------------------------------------------------------------
# Download FlyBase
#-------------------------------------------------------------------------------
void downloadFlyBase() {
	println "Download FlyBase $flybaseRelease"
	dir := "$dirDb/flybase_$flybaseRelease"
	dir.mkdir()
	dir.chdir()

	configFile := "$dirSnpeff/snpEff.FLYBASE_$flybaseRelease.config"
	if( !configFile.exists() ) {
		string[] configLines

		# Download each genome
		for( string g : flybaseGenomes ) {
			organism := g.split('_')[0]
			version := g.split('_')[1]
			url := "ftp://ftp.flybase.net/releases/$flybaseRelease/$g/gff/$organism-all-$version.gff.gz"
			println "Organism: $organism\tversion: $version\tURL: $url"
        
			dirg := "$dir/$g"
			dirg.mkdir()
			fetch(url)
        
			# Update 'config' file
			configLines += "$g.genome : $g"
			configLines += "$g.reference : $url"
		}

		println "Writing config file $configFile"
		configFile.write( configLines.join("\n") )
	}
}

#-------------------------------------------------------------------------------
# Download GWAS catalog
#-------------------------------------------------------------------------------
void downloadGwasCatalog() {
	println "Download Gwas-Catalog"
	dir := "$dirDb/gwasCatalog"
	dir.mkdir()
	dir.chdir()
	if( fetch("http://www.genome.gov/admin/gwascatalog.txt") ) {
		sys cat gwascatalog.txt | $dirScriptsBuild/gwascatalog2vcf.pl > gwascatalog.vcf
	}
}

#-------------------------------------------------------------------------------
# Download Jaspar
#-------------------------------------------------------------------------------
void downloadJaspar() {
	println "Download Jaspar"
	dir := "$dirDb/jaspar"
	dir.mkdir()
	dir.chdir()
	if( fetch("http://jaspar.binf.ku.dk/html/DOWNLOAD/JASPAR_CORE/pfm/redundant/pfm_all.txt") ) {
		sys gzip -c pfm_all.txt > pwms.bin
		println "Jaspar: File $dir/pwms.bin created"
	}
}

#-------------------------------------------------------------------------------
# Download NCBI
#-------------------------------------------------------------------------------
void downloadNcbi() {
	println "Download NCBI bacterial"
	dir := "$dirDownload/ncbi"
	dir.mkdir()
	dir.chdir()

	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Downloading ENSEMBL (BFMPP) $ensemblBfmppRelease"

		task $wgetA "gbk" "ftp://ftp.ncbi.nih.gov/genomes/Bacteria/"
		wait 
		sys mv "ftp.ncbi.nih.gov/genomes/Bacteria/*" .

		# Mark as all downloads OK
		downloadOk.write("OK")
	}

	configFile := "$dirSnpeff/snpEff.NCBI_bacterial.config"
	if( !configFile.exists() ) {
		string[] configLines

		genomes := sys find . -mindepth 1 -maxdepth 1 -type d
		for( string gdir : genomes.lines() ) {
			gen := gdir.baseName()
			configLines += "$gen.genome : $gen\n$gen.reference : http://ftp.ncbi.nih.gov/genomes/Bacteria/"

			# Collapse all geneBank files into one 
			sys cd $gdir
			sys rm -f genes.gbk
			sys cat *.gbk > genes.gbk
		}

		println "Writing config file $configFile"
		configFile.write( configLines.join("\n") )
	}
}

#-------------------------------------------------------------------------------
# Download NextProt
#-------------------------------------------------------------------------------
void downloadNextProt() {
	println "Download NextProt"
	dir := "$dirDb/nextProt"
	dir.mkdir()
	dir.chdir()

	for( string chr : humanChrs ) {
		fetch("ftp://ftp.nextprot.org/pub/current_release/xml/nextprot_chromosome_$chr.xml.gz")
		task gunzip nextprot_chromosome_$chr.xml.gz
	}
}

#-------------------------------------------------------------------------------
# Download geome from UCSC
#-------------------------------------------------------------------------------
void downloadUcscHg19() {
	println "Download hg19 (UCSC)"
	ref := 'hg19'
	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	#---
	# Download data
	#---
	ori := "$dir/ORI"
	ori.mkdir()
	ori.chdir()

	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/bigZips/chromFa.tar.gz")
	fetch("http://hgdownload.soe.ucsc.edu/goldenPath/$ref/bigZips/refMrna.fa.gz")
	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/database/refLink.txt.gz")
	fetch("ftp://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/H_sapiens/protein/protein.fa.gz")

	# Create FASTA file
	fastaFromTar(ref, "$ori/chromFa.tar.gz")

	# Query database
	queryUcsc(ref, dir)

	#---
	# Create protein FASTA
	# Scripts:
	#    - hg19_proteinFasta2NM.pl: Converts from ProteinIDs to TranscriptID
	#    - hg19_proteinFastaReplaceName.pl : Adds TranscriptID version to TranscriptID
	#---
	println 'Creating proteins FASTA'
	task( "$ori/refLink.txt" <- "$ori/refLink.txt.gz") sys gunzip -c $ori/refLink.txt.gz > $ori/refLink.txt
	wait
	task( "$dir/protein.fa.gz" <- "$ori/protein.fa.gz") {
		sys gunzip -c $ori/protein.fa.gz \
		| $dirScriptsBuild/hg19_proteinFasta2NM.pl $ori/refLink.txt \
		| $dirScriptsBuild/hg19_proteinFastaReplaceName.pl genes.refseq.gz \
		> $dir/protein.fa
		sys gzip -f $dir/protein.fa
	}

	#---
	# Create CDS FASTA
	# Previous sed convertion: sed "s/^>gi|[0-9]*|ref|\(.*\)|.*/>\1/" 
	#---
	println 'Creating CDS FASTA'
	task( "$dir/cds.fa.gz" <- "$ori/refMrna.fa.gz" ) {
		sys gunzip -c $ori/refMrna.fa.gz | tr " " "." > $dir/cds.fa
		sys gzip -f $dir/cds.fa
	}

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC (Known genes)
#-------------------------------------------------------------------------------
void downloadUcscHg19Kg() {
	println "Download hg19 (UCSC: Known Genes)"
	ref := 'hg19kg'
	refdb := 'hg19'

	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	# Query database
	queryUcscKg(ref, refdb, dir)

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC
#-------------------------------------------------------------------------------
void downloadUcscHg38() {
	println "Download hg38 (UCSC)"
	ref := 'hg38'

	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	#---
	# Download data
	#---
	ori := "$dir/ORI"
	ori.mkdir()
	ori.chdir()

	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/bigZips/$ref.fa.gz")
	fetch("http://hgdownload.soe.ucsc.edu/goldenPath/$ref/bigZips/refMrna.fa.gz")

	# Query gene database
	queryUcsc(ref, dir)

	#---
	# Create CDS FASTA
	# Previous sed convertion: sed "s/^>gi|[0-9]*|ref|\(.*\)|.*/>\1/" 
	#---
	println 'Creating CDS FASTA'
	task( "$dir/cds.fa.gz" <- "$ori/refMrna.fa.gz" ) {
		sys gunzip -c $ori/refMrna.fa.gz | tr " " "." | gzip -c > $dir/cds.fa
	}

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC (Known genes)
#-------------------------------------------------------------------------------
void downloadUcscHg38Kg() {
	println "Doanload hg38 (UCSC Knonwn Genes)"
	ref := 'hg38kg'
	refdb := 'hg38'

	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	# Query database
	queryUcscKg(ref, refdb, dir)

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC
#-------------------------------------------------------------------------------
void downloadUcscMm10() {
	println "Download mm10 (UCSC)"
	ref := 'mm10'
	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	#---
	# Download data
	#---
	ori := "$dir/ORI"
	ori.mkdir()
	ori.chdir()

	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/bigZips/chromFa.tar.gz")
	fetch("http://hgdownload.soe.ucsc.edu/goldenPath/$ref/bigZips/refMrna.fa.gz")

	# Create fasta from tar
	fastaFromTar(ref, "chromFa.tar.gz")

	# Query gene database
	queryUcsc(ref, dir)

	#---
	# Create CDS FASTA
	# Previous sed convertion: sed "s/^>gi|[0-9]*|ref|\(.*\)|.*/>\1/" 
	#---
	println 'Creating CDS FASTA'
	task( "$dir/cds.fa.gz" <- "$ori/refMrna.fa.gz" ) {
		sys gunzip -c $ori/refMrna.fa.gz | tr " " "." | gzip -c > $dir/cds.fa
	}

	wait
}

#-------------------------------------------------------------------------------
# Download PDB
#-------------------------------------------------------------------------------
void downloadPdb() {
	println "Download PDB"
	dir := "$dirDb/pdb"
	dir.mkdir()
	dir.chdir()

	task rsync -rlpt -v -z --delete --port=33444 rsync.wwpdb.org::ftp_data/structures/divided/pdb/ .
}

#-------------------------------------------------------------------------------
# Create a single fasta fiel from a set of fasta in a tar
#-------------------------------------------------------------------------------
string fastaFromTar(string ref, string tar) {
	dirChr := 'chr'
	dirChr.mkdir()

	fasta := "$ref.fa"
	fastaGz := "$ref.fa.gz"

	if( fastaGz <- tar ) {
		println "Creating fasta file '$fastaGz' from tar file '$tar'"
		sys cd $dirChr
		sys tar -xvzf $tar
		sys rm -f $fasta
		sys cat *.fa > $fasta
		sys gzip $fasta
	}

	return fastaGz
}

#-------------------------------------------------------------------------------
# Query MySql's database (RefSeq)
#-------------------------------------------------------------------------------
string queryUcsc(string ref, string dir) {
	refSeq := "$dir/genes.refseq"
	refSeqGz := "$dir/genes.refseq.gz"
	if( !refSeqGz.exists() ) {
		println "Querying database for RefSeq genes: $ref"
		sys echo "use $ref; select rg.bin as 'binNum', CONCAT(rg.name,'.',gi.version) as 'name', rg.chrom, rg.strand, rg.txStart, rg.txEnd, rg.cdsStart, rg.cdsEnd, rg.exonCount, rg.exonStarts, rg.exonEnds, rg.score, rg.name2, rg.cdsStartStat, rg.cdsEndStat, rg.exonFrames from refGene rg inner join gbCdnaInfo gi on rg.name=gi.acc ;" | mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A $ref > $refSeq
		sys gzip -f $refSeq
	}
	return refSeqGz
}

#-------------------------------------------------------------------------------
# Query MySql's database (KnonwGene)
#-------------------------------------------------------------------------------
string queryUcscKg(string ref,string refdb, string dir) {
	refSeq := "$dir/genes.refseq"
	refSeqGz := "$dir/genes.refseq.gz"
	if( !refSeqGz.exists() ) {
		println "Querying database for KnownGenes genes: $ref"
		sys echo "use $refdb; select  kg.name as '#name' , kg.chrom , kg.strand , kg.txStart , kg.txEnd , kg.cdsStart , kg.cdsEnd , kg.exonCount , kg.exonStarts , kg.exonEnds , kg.proteinID , kg.alignID from knownGene kg;" | mysql --user=genome --host=genome-mysql.cse.ucsc.edu -A $refdb > $refSeq
		sys gzip -f $refSeq
	}
	return refSeqGz
}
