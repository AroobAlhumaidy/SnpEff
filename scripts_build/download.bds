#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Build dbNSFP database for genome 'hg'
#-------------------------------------------------------------------------------
void buildDbNsfp(string hg, string base, string baseChr) {
	hg.mkdir()

	bgFile := "$hg/$base.txt.gz"
	index := "$bgFile.tbi"
	if( bgFile.exists() && index.exists() )	return

	# Compress using bgzip
	string[] bgFiles
	for( string chr : humanChrs ) {
		if( chr == 'MT' ) chr = 'M'	# MT is called just 'M'

		chrFile := "$baseChr\_variant.chr$chr"
		bgChrFile := "$hg/$baseChr\_variant.chr$chr.gz"
		bgFiles += bgChrFile

		task( bgChrFile <- chrFile ) sys bgzip -c $chrFile > $bgChrFile
	}

	# Concatenate individual files
	wait
	bgFilesStr := bgFiles.join(" ")
	task( bgFile <- bgFiles ) sys cat $bgFilesStr > $bgFile

	# Tabix-index the bgzip file
	wait
	task( index <- bgFile ) sys tabix -s 1 -b 2 -e 2 $bgFile
}

#-------------------------------------------------------------------------------
# Download ClinVar
#-------------------------------------------------------------------------------
void downloadClinvar() {
	println "Download Clinvar"

	clinvar := "clinvar.vcf.gz"

	# GRCh37
	dir := "$dirDb/GRCh37/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) fetch("ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/$clinvar")

	# GRCh38
	dir = "$dirDb/GRCh38/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) fetch("ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/$clinvar")

	wait
}

#-------------------------------------------------------------------------------
# Download dbNSFP
#-------------------------------------------------------------------------------
void downloadDbNsfp() {
	println "Download dbNSFP"

	dir := "$dirDb/GRCh38/dbNSFP/"
	dir.mkdir()
	dir.chdir()

	base := "dbNSFPv$dbNsfpVer"
	baseChr := "dbNSFP$dbNsfpVer"
	zip := "$base.zip"

	# Download
	url := "ftp://dbnsfp:dbnsfp@dbnsfp.softgenetics.com/$zip"
	if( !zip.exists() ) {
		println "Download dbNsfp $url ($zip)"
		fetch(url)
	}

	# Unzip
	chr1 := "$baseChr\_variant.chr1"
	if( !chr1.exists() ) {
		print "Uncompressing dbNsfp: $zip ($chr1)\n"
		sys 7za x $zip
	}

	buildDbNsfp('.', base, baseChr)
	wait
}

#-------------------------------------------------------------------------------
# Download dbSnp
#-------------------------------------------------------------------------------
void downloadDbSnp() {
	println "Download dbSnp"

	dbsnp := "dbsnp.vcf.gz"

	# GRCh37
	dir := "$dirDb/GRCh37/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( fetch("ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606_b144_GRCh37p13/VCF/00-All.vcf.gz") ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	}

	# GRCh38
	dir = "$dirDb/GRCh38/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( fetch("ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/00-All.vcf.gz") ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	}

	wait
}

#-------------------------------------------------------------------------------
# Download ENSEMBL genomes
#-------------------------------------------------------------------------------
void downloadEnsembl() {
	println "Download ENSEMBL $ensemblRelease"

	configFile := "$dirSnpeff/config/snpEff.ENSEMBL_$ensemblRelease.config"
	if( configFile.exists() ) {
		println "\tConfig file '$configFile' exists: nothing done"
		return
	}

	site := "ftp.ensembl.org"

	dir := "$dirDownload/ensembl_$ensemblRelease"
	dir.mkdir()
	dir.chdir()

	#---
	# Download all files
	#---
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Downloading ENSEMBL $ensemblRelease"

		# Download GTF files
		sys rsync -av	--include='*$ensemblRelease.gtf.gz' \
						--include='*/' \
						--exclude='*' \
						rsync://$site/ensembl/pub/release-$ensemblRelease/gtf/ \
						.
    
		# Download FASTA files (reference genomes)
		sys rsync -av	--include='*.dna.toplevel.fa.gz' \
						--include='*.cdna.all.fa.gz' \
						--include='*.pep.all.fa.gz' \
						--include='*/' \
						--exclude='*' \
						rsync://$site/ensembl/pub/release-$ensemblRelease/fasta/ \
						.

		# Download regulation tracks
		sys rsync -av	--include='*AnnotatedFeatures.gff.gz' \
						--include='*MotifFeatures.gff.gz' \
						--include='*/' \
						--exclude='*' \
						rsync://$site/ensembl/pub/release-$ensemblRelease/regulation/ \
						.

		downloadOk.write("OK")	# Mark as all downloads OK
	}

	#---
	# Move files to propper structure in 'local data' dir
	#---
	# Move downloaded files to current dir
	sys find . -mindepth 2 -type f -not -path "*/data/*" | xargs -I + $cp + .

	# Move files
	println 'Copying files to data dir'
	string[] configLines
	for( string gtf : ".".dir("*.gtf.gz") ) {
		base := gtf.baseName('.gtf.gz')
		baseNoVer := base.removeExt()
		longName := base.split('\.').head()
		shortName := base.split('\.').tail().join('.')

		if( !shortName.isEmpty() ) {
			println "\t$shortName"
        
			fasta := "$baseNoVer.dna.toplevel.fa.gz"
			cds := "$baseNoVer.cdna.all.fa.gz"
			prot := "$baseNoVer.pep.all.fa.gz"
        
			# Copy files
			dataDir := "data/$shortName"
			dataDir.mkdir()
			if( "$dataDir/genes.gtf.gz" <- gtf )		sys $cp $gtf   $dataDir/genes.gtf.gz
			if( "$dataDir/cds.fa.gz" <- cds )			sys $cp $cds   $dataDir/cds.fa.gz
			if( "$dataDir/protein.fa.gz" <- prot )		sys $cp $prot  $dataDir/protein.fa.gz
			if( "$dataDir/sequences.fa.gz" <- fasta )	sys $cp $fasta $dataDir/sequences.fa.gz
        
			# Append config lines
			configLines += "$shortName.genome : $longName"
			configLines += "$shortName.reference : ftp://ftp.ensembl.org/pub/release-$ensemblRelease/gtf/"
		}
	}

	# Regulation tracks (human and mouse only)
	sys $cp homo_sapiens/AnnotatedFeatures.gff.gz data/$GRCH.$ensemblRelease/regulation.gff.gz
	sys $cp homo_sapiens/MotifFeatures.gff.gz data/$GRCH.$ensemblRelease/motif.gff.gz

	sys $cp mus_musculus/AnnotatedFeatures.gff.gz data/$GRCM.$ensemblRelease/regulation.gff.gz
	sys $cp mus_musculus/MotifFeatures.gff.gz data/$GRCM.$ensemblRelease/motif.gff.gz

	# Create config file
	println "Writing config file $configFile"
	configFile.write( configLines.join("\n") )

	wait
}

#-------------------------------------------------------------------------------
# Download ENSEMBL genomes (BFMPP)
#-------------------------------------------------------------------------------
void downloadEnsemblBfmpp() {
	println "Download ENSEMBL BFMPP $ensemblBfmppRelease"

	configFile := "$dirSnpeff/config/snpEff.ENSEMBL_BFMPP_$ensemblBfmppRelease.config"
	if( configFile.exists() ) {
		println "\tConfig file '$configFile' exists: nothing done"
		return
	}

	site := "ftp.ensemblgenomes.org"

	dir := "$dirDownload/ensembl_bfmpp_$ensemblBfmppRelease"
	dir.mkdir()
	dir.chdir()

	#---
	# Download all files
	#---
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Downloading ENSEMBL (BFMPP) $ensemblBfmppRelease"

		for(string org : [ 'bacteria', 'fungi', 'metazoa', 'plants', 'protists'] ) {
			# Download GTF files (annotations)
			task rsync -av	--include='*$ensemblBfmppRelease.gtf.gz' \
							--include='*/' \
							--exclude='*' \
							rsync://$site/all/pub/$org/release-$ensemblBfmppRelease/gtf/ \
							.
        
			# Download FASTA files (reference genomes)
			task rsync -av	--include='*$ensemblBfmppRelease.dna.toplevel.fa.gz' \
							--include='*$ensemblBfmppRelease.cdna.all.fa.gz' \
							--include='*$ensemblBfmppRelease.pep.all.fa.gz' \
							--include='*/' \
							--exclude='*' \
							rsync://$site/all/pub/$org/release-$ensemblBfmppRelease/fasta/ \
							.
		}
		wait

		downloadOk.write("OK")	# Mark as all downloads OK
	}

	#---
	# Move files to propper structure in 'local data' dir
	#---
	# Copy files to local dir
	sys find . -mindepth 2 -type f -not -path "*/data/*" | xargs -I + $cp + .

	# Move files
	println 'Copying files to data dir'
	string[] configLines
	for( string gtf : ".".dir("*.gtf.gz") ) {
		base := gtf.baseName('.gtf.gz')
		longName := base.split('\.').head()
		shortName := base.split('\.').tail().join('.')

		if( !shortName.isEmpty() ) {
			println "\t$shortName"
        
			fasta := "$base.dna.toplevel.fa.gz"
			cds := "$base.cdna.all.fa.gz"
			prot := "$base.pep.all.fa.gz"
			println "\t$shortName"
        
			# Copy files
			dataDir := "data/$shortName"
			dataDir.mkdir()
			if( "$dataDir/genes.gtf.gz" <- gtf )		sys $cp $gtf   $dataDir/genes.gtf.gz
			if( "$dataDir/cds.fa.gz" <- cds )			sys $cp $cds   $dataDir/cds.fa.gz
			if( "$dataDir/protein.fa.gz" <- prot )		sys $cp $prot  $dataDir/protein.fa.gz
			if( "$dataDir/sequences.fa.gz" <- fasta )	sys $cp $fasta $dataDir/sequences.fa.gz
        
			# Append config lines
			configLines += "$shortName.genome : $longName"
			configLines += "$shortName.reference : $site"
		}
	}

	# Create config file
	println "Writing config file $configFile"
	configFile.write( configLines.join("\n") )

	wait
}

#-------------------------------------------------------------------------------
# Download FlyBase
#-------------------------------------------------------------------------------
void downloadFlyBase() {
	println "Download FlyBase $flybaseRelease"

	configFile := "$dirSnpeff/config/snpEff.FLYBASE_$flybaseRelease.config"
	if( configFile.exists() ) {
		println "\tConfig file '$configFile' exists: nothing done"
		return
	}

	dir := "$dirDownload/flybase_$flybaseRelease"
	dir.mkdir()
	dir.chdir()

	# Download each genome
	string[] configLines
	for( string g : flybaseGenomes ) {
		organism := g.split('_')[0]
		version := g.split('_')[1]
		url := "ftp://ftp.flybase.net/releases/$flybaseRelease/$g/gff/$organism-all-$version.gff.gz"
		println "Organism: $organism\tversion: $version\tURL: $url"
    
		dirg := "$dir/$g"
		dirg.mkdir()
		fetch(url)
    
		# Update 'config' file
		configLines += "$g.genome : $g"
		configLines += "$g.reference : $url"

		# Copy to data dir
		dataDir := "data/$g"
		dataDir.mkdir()
		sys cp $organism-all-$version.gff.gz $dataDir/genes.gff.gz
	}

	println "Writing config file $configFile"
	configFile.write( configLines.join("\n") )

	wait
}

#-------------------------------------------------------------------------------
# Download GWAS catalog
#-------------------------------------------------------------------------------
void downloadGwasCatalog() {
	println "Download Gwas-Catalog"

	dir := "$dirDb/gwasCatalog"
	dir.mkdir()
	dir.chdir()

	if( fetch("http://www.genome.gov/admin/gwascatalog.txt") ) {
		sys cat gwascatalog.txt | $dirScriptsBuild/gwascatalog2vcf.pl > gwascatalog.vcf
	}

	wait
}

#-------------------------------------------------------------------------------
# Download Jaspar
#-------------------------------------------------------------------------------
void downloadJaspar() {
	println "Download Jaspar"

	dir := "$dirDb/jaspar"
	dir.mkdir()
	dir.chdir()

	if( fetch("http://jaspar.binf.ku.dk/html/DOWNLOAD/JASPAR_CORE/pfm/redundant/pfm_all.txt") ) {
		sys gzip -c pfm_all.txt > pwms.bin
		println "Jaspar: File $dir/pwms.bin created"
	}

	wait
}

#-------------------------------------------------------------------------------
# Download NCBI
#-------------------------------------------------------------------------------
void downloadNcbi() {
	println "Download NCBI bacterial"

	configFile := "$dirSnpeff/config/snpEff.NCBI_bacterial.config"
	if( configFile.exists() ) {
		println "\tConfig file '$configFile' exists: nothing done"
		return
	}

	dir := "$dirDownload/ncbi"
	dir.mkdir()
	dir.chdir()

	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Downloading ENSEMBL (BFMPP) $ensemblBfmppRelease"

		task $wgetA "gbk" "ftp://ftp.ncbi.nih.gov/genomes/Bacteria/"
		wait 

		downloadOk.write("OK")	# Mark as all downloads OK
	}

	# Copy to 'data' dir
	"data".mkdir()
	sys $cp -rv ftp.ncbi.nih.gov/genomes/Bacteria/* data/

	# Create genes.gbk files and create config
	"data".chdir()
	string[] configLines

	println "Creating genes.gbk:"
	genomes := sys find . -mindepth 1 -maxdepth 1 -type d
	for( string gdir : genomes.lines() ) {
		gen := gdir.baseName()
		println "\t$gen"
		configLines += "$gen.genome : $gen\n$gen.reference : http://ftp.ncbi.nih.gov/genomes/Bacteria/"

		# Collapse all geneBank files into one 
		sys cd $gdir; rm -f genes.gbk; cat *.gbk > genes.gbk
	}

	println "Writing config file $configFile"
	configFile.write( configLines.join("\n") )

	wait
}

#-------------------------------------------------------------------------------
# Download NextProt
#-------------------------------------------------------------------------------
void downloadNextProt() {
	println "Download NextProt"

	dir := "$dirDb/nextProt"
	dir.mkdir()
	dir.chdir()
	
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download NextProt"

		# Download each chromosome's XML file
		for( string chr : humanChrs ) {
			fetch("ftp://ftp.nextprot.org/pub/current_release/xml/nextprot_chromosome_$chr.xml.gz")
		}

		downloadOk.write("OK")	# Mark as downlaoded OK
	}

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC
#-------------------------------------------------------------------------------
void downloadUcscHg19() {
	println "Download hg19 (UCSC)"

	ref := 'hg19'
	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	#---
	# Download data
	#---
	ori := "$dir/ORI"
	ori.mkdir()
	ori.chdir()

	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/bigZips/chromFa.tar.gz")
	fetch("http://hgdownload.soe.ucsc.edu/goldenPath/$ref/bigZips/refMrna.fa.gz")
	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/database/refLink.txt.gz")
	fetch("ftp://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/H_sapiens/protein/protein.fa.gz")

	# Create FASTA file
	fastaFromTar(ref, "$ori/chromFa.tar.gz")

	# Query database
	queryUcsc(ref, dir)

	#---
	# Create protein FASTA
	# Scripts:
	#    - hg19_proteinFasta2NM.pl: Converts from ProteinIDs to TranscriptID
	#    - hg19_proteinFastaReplaceName.pl : Adds TranscriptID version to TranscriptID
	#---
	println 'Creating proteins FASTA'
	task( "$ori/refLink.txt" <- "$ori/refLink.txt.gz") sys gunzip -c $ori/refLink.txt.gz > $ori/refLink.txt
	wait
	task( "$dir/protein.fa.gz" <- "$ori/protein.fa.gz") {
		sys gunzip -c $ori/protein.fa.gz \
		| $dirScriptsBuild/hg19_proteinFasta2NM.pl $ori/refLink.txt \
		| $dirScriptsBuild/hg19_proteinFastaReplaceName.pl genes.refseq.gz \
		> $dir/protein.fa
		sys gzip -f $dir/protein.fa
	}

	#---
	# Create CDS FASTA
	# Previous sed convertion: sed "s/^>gi|[0-9]*|ref|\(.*\)|.*/>\1/" 
	#---
	println 'Creating CDS FASTA'
	task( "$dir/cds.fa.gz" <- "$ori/refMrna.fa.gz" ) {
		sys gunzip -c $ori/refMrna.fa.gz | tr " " "." > $dir/cds.fa
		sys gzip -f $dir/cds.fa
	}

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC (Known genes)
#-------------------------------------------------------------------------------
void downloadUcscHg19Kg() {
	println "Download hg19 (UCSC: Known Genes)"
	ref := 'hg19kg'
	refdb := 'hg19'

	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	# Query database
	queryUcscKg(ref, refdb, dir)

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC
#-------------------------------------------------------------------------------
void downloadUcscHg38() {
	println "Download hg38 (UCSC)"
	ref := 'hg38'

	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	#---
	# Download data
	#---
	ori := "$dir/ORI"
	ori.mkdir()
	ori.chdir()

	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/bigZips/$ref.fa.gz")
	fetch("http://hgdownload.soe.ucsc.edu/goldenPath/$ref/bigZips/refMrna.fa.gz")

	# Query gene database
	queryUcsc(ref, dir)

	#---
	# Create CDS FASTA
	# Previous sed convertion: sed "s/^>gi|[0-9]*|ref|\(.*\)|.*/>\1/" 
	#---
	println 'Creating CDS FASTA'
	task( "$dir/cds.fa.gz" <- "$ori/refMrna.fa.gz" ) {
		sys gunzip -c $ori/refMrna.fa.gz | tr " " "." > $dir/cds.fa
		sys gzip -f $dir/cds.fa
	}

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC (Known genes)
#-------------------------------------------------------------------------------
void downloadUcscHg38Kg() {
	println "Doanload hg38 (UCSC Knonwn Genes)"
	ref := 'hg38kg'
	refdb := 'hg38'

	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	# Query database
	queryUcscKg(ref, refdb, dir)

	wait
}

#-------------------------------------------------------------------------------
# Download geome from UCSC
#-------------------------------------------------------------------------------
void downloadUcscMm10() {
	println "Download mm10 (UCSC)"
	ref := 'mm10'
	dir := "$dirDownload/ucsc_$ref"
	dir.mkdir()
	dir.chdir()
	
	#---
	# Download data
	#---
	ori := "$dir/ORI"
	ori.mkdir()
	ori.chdir()

	fetch("http://hgdownload.cse.ucsc.edu/goldenPath/$ref/bigZips/chromFa.tar.gz")
	fetch("http://hgdownload.soe.ucsc.edu/goldenPath/$ref/bigZips/refMrna.fa.gz")

	# Create fasta from tar
	fastaFromTar(ref, "chromFa.tar.gz")

	# Query gene database
	queryUcsc(ref, dir)

	#---
	# Create CDS FASTA
	# Previous sed convertion: sed "s/^>gi|[0-9]*|ref|\(.*\)|.*/>\1/" 
	#---
	println 'Creating CDS FASTA'
	task( "$dir/cds.fa.gz" <- "$ori/refMrna.fa.gz" ) {
		sys gunzip -c $ori/refMrna.fa.gz | tr " " "." > $dir/cds.fa
		sys gzip -f $dir/cds.fa
	}

	wait
}

#-------------------------------------------------------------------------------
# Download PDB
#-------------------------------------------------------------------------------
void downloadPdb() {
	println "Download PDB"

	dir := "$dirDb/pdb"
	dir.mkdir()
	dir.chdir()

	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download PDB"
		task rsync -rlpt -v -z --delete --port=33444 rsync.wwpdb.org::ftp_data/structures/divided/pdb/ .
		downloadOk.write("OK")	# Mark as downlaoded OK
	}

	wait
}

#-------------------------------------------------------------------------------
# Create a single fasta fiel from a set of fasta in a tar
#-------------------------------------------------------------------------------
string fastaFromTar(string ref, string tar) {
	dirChr := 'chr'
	dirChr.mkdir()

	fasta := "$ref.fa"
	fastaGz := "$ref.fa.gz"

	if( fastaGz <- tar ) {
		println "Creating fasta file '$fastaGz' from tar file '$tar'"
		sys cd $dirChr
		sys tar -xvzf $tar
		sys rm -f $fasta
		sys cat *.fa > $fasta
		sys gzip -f $fasta
	}

	return fastaGz
}

#-------------------------------------------------------------------------------
# Fetch (wget) a file
#-------------------------------------------------------------------------------
bool fetch(string url) {
	if( url.startsWith('ftp://') ) {
		sys $wget $url
		return true
	}

	base := url.baseName()
	if( base <- url ) {
		println "Downloading '$url' to '$base'"
		sys $wget $url
		return true
	}
	return false
}

#-------------------------------------------------------------------------------
# QueryUcsc
#-------------------------------------------------------------------------------
void queryUcscAll() {
	refs:= ['hg19', 'hg38', 'mm10']

	for( string ref : refs ) {
		dir := "$dirDownload/ucsc_$ref"
		dir.mkdir()
		dir.chdir()
		queryUcsc(ref, dir)

		refdb := ref
		ref = ref + 'kg'
		dir = "$dirDownload/ucsc_$ref"
		dir.mkdir()
		dir.chdir()
		queryUcscKg(ref, refdb, dir)
	}
}

#-------------------------------------------------------------------------------
# Query MySql's database (RefSeq)
#-------------------------------------------------------------------------------
string queryUcsc(string ref, string dir) {
	refSeq := "$dir/genes.refseq"
	refSeqGz := "$dir/genes.refseq.gz"
	if( !refSeqGz.exists() ) {
		println "Querying database for RefSeq genes: $ref"
		query := "use $ref; select rg.bin as 'binNum', CONCAT(rg.name,'.',gi.version) as 'name', rg.chrom, rg.strand, rg.txStart, rg.txEnd, rg.cdsStart, rg.cdsEnd, rg.exonCount, rg.exonStarts, rg.exonEnds, rg.score, rg.name2, rg.cdsStartStat, rg.cdsEndStat, rg.exonFrames from refGene rg inner join gbCdnaInfo gi on rg.name=gi.acc ;"
		mysqlServer := "genome-mysql.cse.ucsc.edu"
		sys echo "$query" | mysql --user=genome --host=$mysqlServer -A $ref | gzip -c > $refSeq.gz
	}
	return refSeqGz
}

#-------------------------------------------------------------------------------
# Query MySql's database (KnonwGene)
#-------------------------------------------------------------------------------
string queryUcscKg(string ref, string refdb, string dir) {
	refSeq := "$dir/genes.kg"
	refSeqGz := "$dir/genes.kg.gz"
	if( !refSeqGz.exists() ) {
		println "Querying database for KnownGenes genes: $ref"
		query := "use $refdb; select  kg.name as '#name' , kg.chrom , kg.strand , kg.txStart , kg.txEnd , kg.cdsStart , kg.cdsEnd , kg.exonCount , kg.exonStarts , kg.exonEnds , kg.proteinID , kg.alignID from knownGene kg;"
		mysqlServer := "genome-mysql.cse.ucsc.edu"
		sys echo "$query" | mysql --user=genome --host=$mysqlServer -A $refdb | gzip -c > $refSeq.gz
	}
	return refSeqGz
}
