#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Create databases
#
#-------------------------------------------------------------------------------

# Commands
snpeff					:= "java -Xmx10G -jar snpEff.jar "
snpeffXl				:= "java -Xmx50G -jar snpEff.jar "
snpeffBuild				:= "$snpeff build -v"

# Directories
dirSnpeff				:="$HOME/snpEff"
dirData					:="$dirSnpeff/data"
dirDownload				:="$dirSnpeff/download"
dirZip					:="$dirSnpeff/zip"
dirBuild				:="$dirSnpeff/build"
dirDb					:="$dirSnpeff/db"
dirDarned				:="$dirDb/darned/"
pwmsBin					:="$dirDb/jaspar/pwms.bin"

# Program parameters and switches
buildDb					:= false		# Build databases
buildTests 				:= false		# Build databases used in test cases
distro	 				:= false		# Create distribution files
download 				:= false		# Download files
make	 				:= false		# Make (build JAR files)
makeBundleLists			:= false		# Create bundle lists and config entries
makeConfig				:= false		# Create config file
test	 				:= false		# Run test cases
upload	 				:= false		# Upload for distribution

# Genome bundles
bundles					:= ["NCBI_bacterial", "ENSEMBL_BFMPP_21", "ENSEMBL_BFMPP_22"]

int	wget_wait			:= 1								# Wait a few moments between file downloads (to avoid saturating the server)
string wget				:= "wget --wait=$wget_wait -r -nc "	# Wget command line

# Output files
string buildSummary		:= "build.out"

#-------------------------------------------------------------------------------
# Variables
#-------------------------------------------------------------------------------

string{} built

#-------------------------------------------------------------------------------
# Add a build command
#-------------------------------------------------------------------------------
bool addBuild(string genome) {
	dir := "$dirData/$genome"
	db := "$dir/snpEffectPredictor.bin"
	geneFiles := dir.dirPath(".*/genes.*") 

	# No 'genes' file? Error
	if( geneFiles.isEmpty() ) {
		warning("No genes file for $genome\n")
		return( false );
	}

	geneFile := geneFiles.head()
	if( built.hasKey(genome) ) {
		print("INFO : Genome $genome already built\n")
	} else if( db <- geneFile ) {
		print("BUILD:\t$genome\tgeneFile: $geneFile\tdb: $db\n")
		task $snpeffBuild $genome 2>&1 | tee $dirBuild/build.$genome.out
	} else {
		print("OK  :\t$genome\tgeneFile: $geneFile\tdb: $db\n")
	}

	# Mark as built
	built{genome} = genome
	return( true )
}

#-------------------------------------------------------------------------------
# Build all databases
#-------------------------------------------------------------------------------

bool buildDbAll() {
	print("Build: Start\n")
	dirBuild.mkdir()	# Make sure build dir exists
	
	# Look into all directories
	print("Available databases:\n")
	dbids := sys $snpeff databases | cut -f 1 | tail -n +3 

	print("Building:\n")
	for(string genome : dbids.lines()  ) {
		genome = genome.trim().baseName()
		addBuild(genome)
	}
	wait

	# Create build summary
	print("Build: Checking build logs!\n")
	sys cat $dirBuild/build.*.out | ./scripts_build/buildCheck.pl | tee $buildSummary

	print("Build: Done!\n")
	return( true )
}

#-------------------------------------------------------------------------------
# Build special databases
#-------------------------------------------------------------------------------

void buildDbSpecial() {
	buildNextProt()
}

#-------------------------------------------------------------------------------
# Build special databases
#-------------------------------------------------------------------------------

void buildNextProt() {
	# Note: This takes a huge amount of memory, don't run multiple of these process because the server will crash
	# TODO: Add amount of memory to the taks and remove the constraint
	print("Build special.\n\tFIXME: Create a 'task' instead of a 'sys'\n")

	# XML files used to build NextProt
	dirNextProt := "$dirSnpeff/db/nextProt/"
	xmlFiles := dirNextProt.dirPath(".*.xml")

	# Check each genome version
	for( string hg : dirData.dir("GRCh37.7.*") ) {
		npfile := "$dirData/$hg/nextProt.bin"

		if( !npfile.exists() ) {
			print("NextProt ($hg): Build\n")
			sys $snpeffXl buildNextProt -v $hg db/nextProt/
		} else {
			print("NextProt ($hg): OK\n")
		}
	}
}

#-------------------------------------------------------------------------------
# Build databases used in test cases
#-------------------------------------------------------------------------------

void buildDbTest() {
	dirs := "$dirSnpeff/data/".dir("test.*")

	# This one needs PWMs
	sys cp db/jaspar/pwms.bin data/testHg3770Chr22/

	# Build all test genomes
	for( string gen : dirs ) {
		db := "$dirSnpeff/data/$gen/snpEffectPredictor.bin"
		if( ! db.exists() )	{
			println "Genome: $gen\tdb: '$db'"
			task $snpeff build -v $gen
		}
	}
}

#-------------------------------------------------------------------------------
# Copy pwms.bin to every human dir
#-------------------------------------------------------------------------------
void copyPwm() {
	humanDirs := dirData.dirPath(".*/GRCh.*")
	print("Copying $pwmsBin to human genomes\n")
	for( string hg : humanDirs ) {
		print("\t$hg\n")
		sys cp $pwmsBin $hg
	}
}

#-------------------------------------------------------------------------------
# Download all databases
#-------------------------------------------------------------------------------

void downloadAll() {
	sys ./scripts_build/download_ensembl_bfmpp.sh
	sys ./scripts_build/download_ensembl.sh

	# Human specific databases
	sys ./scripts_build/download_hg19.sh
	sys ./scripts_build/download_hg19kg.sh
	sys ./scripts_build/download_nextProt.sh
	sys ./scripts_build/download_Pwms_Jaspar.sh
	sys ./scripts_build/download_gwasCatalog.sh 
	sys ./scripts_build/download_epigenome.sh	# This might take a few days
	#sys ./scripts_build/download_ncbi.sh		# NCBI downloads do not seem to be working OK
	#sys ./scripts_build/download_darned.sh		# Darned not working

	# Uncompress and re-compress downloaded files (avoid block compress problem with Java library)
	fid := sys find $dirDownload/data -iname "*.gz"
	for( string gz : fid.stdout().lines() ) {
		f := gz.removeExt()
		print("Recompress $gz <-> $f\n")
		task gunzip -v $gz; gzip -v $f
	}

	# Move downloaded data to 'data' dir
	sys mv $dirDownload/data/genomes/* data/genomes/ 
	sys rmdir $dirDownload/data/genomes 
	sys mv $dirDownload/data/* data/ 
	sys rmdir $dirDownload/data/
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

print("Building...\n")

# Create JAR files
if( make ) {
	sys ./scripts_build/make_config.sh
	sys ./scripts_build/make.sh
}

# Perform downloads
if( download ) downloadAll()

# Build genomes
if( buildDb ) {
	copyPwm()		# We must do this before building, otherwise we don't get 'motif.bin' databases
	buildDbAll()
	buildDbSpecial()
}

# Build databases used in test cases
if( buildTests ) {
	buildDbTest()
}

# Run test cases 
if( test ) {

	# Run SnpSift test cases
	sys cd $HOME/workspace/SnpSift/ ; \
		java -Xmx4g \
			-cp $DIR/SnpSift.jar \
			org.junit.runner.JUnitCore \
			ca.mcgill.mcb.pcingola.snpSift.testCases.TestSuiteAll \
			2>&1 \
			| tee $DIR/testCases.snpsift.txt

	# Run SnpEff test cases
	sys cd $HOME/workspace/SnpEff/ ; \
		java -Xmx4g \
			-cp $DIR/snpEff.jar \
			org.junit.runner.JUnitCore \
			ca.mcgill.mcb.pcingola.snpEffect.testCases.TestSuiteAll \
			2>&1 \
			| tee $DIR/testCases.snpeff.txt
}

# Create bundle list and config files
if( makeBundleLists ) {
	for( string bundle : bundles ) {
		sys rm -vf config/snpEff.bundles.*.config
		sys cat config/snpEff.$bundle.config | grep "\.genome" | cut -f 1 -d : | sed "s/.genome\s*$//" > snpEff.bundles.$bundle.genomes.txt
		sys ./scripts_build/createBundles.pl $bundle.genomes.txt $bundle | tee config/snpEff.bundles.$bundle.config
	}

	# We need to rebuild config file
	makeConfig = true
}

# Create config file
if( makeConfig ) {
	sys cat config/snpEff.core.config \
			config/snpEff.dbs.config \
			config/snpEff.test.config \
			config/snpEff.ENSEMBL_70.config \
			config/snpEff.ENSEMBL_71.config \
			config/snpEff.ENSEMBL_72.config \
			config/snpEff.ENSEMBL_73.config \
			config/snpEff.ENSEMBL_74.config \
			config/snpEff.ENSEMBL_75.config \
			config/snpEff.ENSEMBL_76.config \
			config/snpEff.ENSEMBL_BFMPP_21.config \
			config/snpEff.ENSEMBL_BFMPP_22.config \
			config/snpEff.NCBI_bacterial.config \
			config/snpEff.etc.config \
			config/snpEff.bundles.*.config \
			> snpEff.config
}

# Create distribution files
if( distro ) sys ./scripts_build/distro.sh

# Upload files
if( upload ) sys ./scripts_build/uploadSourceForge.sh

wait
print("Done!\n")
