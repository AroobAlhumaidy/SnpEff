#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Create databases
#
#-------------------------------------------------------------------------------


# Command line options
bundleLists			:= false		help Create bundle lists and config entries
config				:= false		help Create config file
db					:= false		help Build databases
dbTest				:= false		help Build databases used in test cases
distro	 			:= false		help Create distribution files (zip)
distroBundles		:= false		help Create bundle files (zip)
distroCore 			:= false		help Create distribution files (zip only 'core')
download 			:= false		help Download files
make	 			:= false		help Make (build JAR files)
query	 			:= false		help Run queries against UCSC MySql server
test	 			:= false		help Run SnpEff / SnpSift test cases
testHgvs 			:= false		help Run SnpEff HGVS test cases
uploadCore			:= false		help Upload 'core' package
uploadDbs			:= false		help Upload all databases in 'zip' directory
uploadDev			:= false		help Upload 'development' version
uploadHtml 			:= false		help Upload weh pages
string[] zipGenome	= []			help Zip a specific genome

# Process us one CPU
cpus = 1

# Genome versions
ensemblRelease		:= "82"
ensemblBfmppRelease	:= "29"
flybaseRelease		:= "FB2015_05"
flybaseGenomes		:= [ 'dana_r1.04', 'dere_r1.04', 'dgri_r1.3', 'dmel_r6.08', 'dmoj_r1.04', 'dper_r1.3', 'dpse_r3.03', 'dsec_r1.3', 'dsim_r2.01', 'dvir_r1.04', 'dwil_r1.04', 'dyak_r1.04' ]
GRCH				:= "GRCh38"
humanChrs			:= [ '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', 'X', 'Y', 'MT']
GRCM				:= "GRCm38"
dbNsfpVer			:= '3.1a'

# Configuration parameters
bundles				:= ["NCBI_bacteria", "NCBI_viruses", "ENSEMBL_BFMPP_27", "ENSEMBL_BFMPP_29"]

# Commands
snpeff				:= "java -Xmx10G -jar snpEff.jar "
snpeffXl			:= "java -Xmx50G -jar snpEff.jar "
snpeffBuild			:= "$snpeff build -v"
snpsift				:= "java -jar SnpSift.jar "
wget				:= "wget -N --retr-symlinks"
wgetA				:= "wget -r -N -A"
cp					:= "cp -v -u"

# Directories
dirSnpeff			:="$HOME/snpEff"
dirScripts			:="$dirSnpeff/scripts"
dirScriptsBuild		:="$dirSnpeff/scripts_build"
dirData				:="$dirSnpeff/data"
dirDownload			:="$dirSnpeff/download"
dirZip				:="$dirSnpeff/zip"
dirBuild			:="$dirSnpeff/build"
dirDb				:="$dirSnpeff/db"
dirDarned			:="$dirDb/darned/"
pwmsBin				:="$dirDb/jaspar/pwms.bin"

# URLs
snpeffDownload		:= "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip"

# Output files
buildSummary		:= "build.out"

# Include (depends on some of the variables defined above)
include 'download.bds'

#-------------------------------------------------------------------------------
# Variables
#-------------------------------------------------------------------------------

string{} built

# SnpEff version
snpEffVersion := ""

#-------------------------------------------------------------------------------
# Add a task to build a database for 'genome'
#-------------------------------------------------------------------------------
bool addBuildDb(string genome) {
	dir := "$dirData/$genome"
	db := "$dir/snpEffectPredictor.bin"
	geneFiles := dir.dirPath("genes.*") 

	# No 'genes' file? Error
	if( geneFiles.isEmpty() ) {
		warning("No genes file for $genome\n")
		return( false );
	}

	geneFile := geneFiles.head()
	if( built.hasKey(genome) ) {
		print("INFO : Genome $genome already built\n")
	} else if( db <- geneFile ) {
		print("BUILD:\t$genome\tgeneFile: $geneFile\tdb: $db\n")

		# Use 'storeSeqs' for human and mouse genome
		opt := ( genome.startsWith('GRC') || genome.startsWith('hg') ? "-storeSeqs" : "" )

		task $snpeffBuild $opt $genome 2>&1 | tee $dirBuild/build.$genome.out
	} else {
		print("OK  :\t$genome\tgeneFile: $geneFile\tdb: $db\n")
	}

	# Mark as built
	built{genome} = genome
	return( true )
}

#-------------------------------------------------------------------------------
# Build JAR files (compile)
#-------------------------------------------------------------------------------

void build() {
	buildConfig()
	sys ./scripts_build/make.sh
}

#-------------------------------------------------------------------------------
# Build bundle lists
#-------------------------------------------------------------------------------

void buildBundleLists() {
	println "Make bundle lists:"

	for( string bundle : bundles ) {
		conf := "config/snpEff.bundles.$bundle.config"

		if( conf.exists() ) {
			print "Config file '$conf' exists, nothing done\n"
		} else {
			println "Creating bundles '$bundle' -> '$conf'"
			sys cat config/snpEff.$bundle.config | cut -f 1 -d : | grep ".genome" | sed "s/.genome\s*//" | tr -d " " > snpEff.bundles.$bundle.genomes.txt
			sys ./scripts_build/createBundles.pl snpEff.bundles.$bundle.genomes.txt $bundle > $conf
		}
	}

	# We must rebuild config file
	buildConfig()
}

#-------------------------------------------------------------------------------
# Build configuration file (snpEff.config)
#-------------------------------------------------------------------------------

void buildConfig() {
	sys cat config/snpEff.core.config \
			config/snpEff.dbs.config \
			config/snpEff.test.config \
			config/snpEff.ENSEMBL_75.config \
			config/snpEff.ENSEMBL_78.config \
			config/snpEff.ENSEMBL_79.config \
			config/snpEff.ENSEMBL_81.config \
			config/snpEff.ENSEMBL_82.config \
			config/snpEff.ENSEMBL_BFMPP_27.config \
			config/snpEff.ENSEMBL_BFMPP_29.config \
			config/snpEff.FLYBASE_FB2015_05.config \
			config/snpEff.NCBI_bacteria.config \
			config/snpEff.NCBI_viruses.config \
			config/snpEff.etc.config \
			config/snpEff.bundles.*.config \
			> snpEff.config
}

#-------------------------------------------------------------------------------
# Build all databases
#-------------------------------------------------------------------------------

void buildDb() {
	copyPwm()		# We must do this before building, otherwise we don't get 'motif.bin' databases
	buildDbAll()
	buildDbSpecial()
}

#-------------------------------------------------------------------------------
# Build all databases
#-------------------------------------------------------------------------------

bool buildDbAll() {
	print("Build: Start\n")
	dirBuild.mkdir()	# Make sure build dir exists
	
	# Look into all directories
	print("Available databases:\n")
	dbids := sys $snpeff databases | cut -f 1 | tail -n +3 

	print("Building:\n")
	for(string genome : dbids.lines()  ) {
		genome = genome.trim().baseName()
		addBuildDb(genome)
	}
	wait

	# Create build summary
	print("Build: Checking build logs!\n")
	sys cat $dirBuild/build.*.out | ./scripts_build/buildCheck.pl | tee $buildSummary

	print("Build: Done!\n")
	return( true )
}

#-------------------------------------------------------------------------------
# Build special databases
#-------------------------------------------------------------------------------

void buildDbSpecial() {
	buildDbNextProt()
}

#-------------------------------------------------------------------------------
# Build databases used in test cases
#-------------------------------------------------------------------------------

void buildDbTest() {
	dirs := "$dirSnpeff/data/".dir("test*")

	# This one needs PWMs
	sys cp $pwmsBin data/testHg3770Chr22/

	# Build all test genomes
	for( string gen : dirs ) {
		db := "$dirSnpeff/data/$gen/snpEffectPredictor.bin"
		if( ! db.exists() )	{
			println "Genome: $gen\tdb: '$db'"
			task $snpeff build -v -storeSeqs $gen
		}
	}

	# Build PDB database for testHg19Chr1
	# We need to make sure that PDB entry '1A12' is in the dir
	task $snpeff pdb -pdbDir $dirSnpeff/data/testHg19Chr1 testHg19Chr1
}

#-------------------------------------------------------------------------------
# Build special databases
#-------------------------------------------------------------------------------

void buildDbNextProt() {
	# Note: This takes a huge amount of memory, don't run multiple of these process because the server will crash
	# TODO: Add amount of memory to the taks and remove the constraint
	print("Build special.\n")

	# XML files used to build NextProt
	dirNextProt := "$dirSnpeff/db/nextProt/"
	xmlFiles := dirNextProt.dirPath("*.xml")

	# Check each genome version
	for( string hg : dirData.dir("GRCh37.*") ) {
		hg = hg.baseName()
		npfile := "$dirData/$hg/nextProt.bin"

		if( !npfile.exists() ) {
			print("NextProt ($hg): Build\t\tNextProt db file: '$npfile'\n")
			sys $snpeffXl buildNextProt -v $hg db/nextProt/
		} else {
			print("NextProt ($hg): OK\t\tNextProt db file: '$npfile'\n")
		}
	}
}

#-------------------------------------------------------------------------------
# Copy pwms.bin to every human dir
#-------------------------------------------------------------------------------
void copyPwm() {
	humanDirs := dirData.dirPath("GRCh*")
	print("Copying $pwmsBin to human genomes\n")
	for( string hg : humanDirs ) {
		print("\t$hg\n")
		sys cp $pwmsBin $hg
	}
}

#-------------------------------------------------------------------------------
# Download all databases
#-------------------------------------------------------------------------------

void downloadAll() {
	# Ensembl genomes
	downloadEnsembl()
	downloadEnsemblBfmpp()

	# UCSC genomes
	downloadUcscHg19()
	downloadUcscHg19Kg()
	downloadUcscHg38()
	downloadUcscHg38Kg()
	downloadUcscMm10()

	# Other databases
	downloadJaspar()
	downloadGwasCatalog()
	downloadNextProt()
	downloadPdb()
	downloadDbNsfp()	# We need to update this method
	downloadClinvar()
	downloadDbSnp()

   # Non-human
	downloadNcbi()
	downloadNcbiBacteria()
	downloadNcbiVirus()
	downloadFlyBase()
}

#-------------------------------------------------------------------------------
# Create distribution files
#-------------------------------------------------------------------------------

void makeDistro() {
	dirZip.mkdir()	# Make sure zip dir exists
	zipCore()
	zipDbs()
	zipBundles()
}

#-------------------------------------------------------------------------------
# Run test cases
#-------------------------------------------------------------------------------

void runTests() {
	runTestsSnpSiftAll()
	runTestsSnpEffIntegration()
	runTestsSnpEffUnity()
}

#-------------------------------------------------------------------------------
# Run test cases
#-------------------------------------------------------------------------------

void runTestsSnpSiftAll() {
	# Run SnpSift test cases
	task cd $HOME/workspace/SnpSift/ ; \
		java -Xmx4g \
			-cp $dirSnpeff/SnpSift.jar \
			org.junit.runner.JUnitCore \
			ca.mcgill.mcb.pcingola.snpSift.testCases.TestSuiteAll \
			2>&1 \
			| tee $dirSnpeff/testcases.snpsift.all.txt
}

#-------------------------------------------------------------------------------
# Run test cases: SnpEff-HGVS
#-------------------------------------------------------------------------------

void runTestsSnpEffHgvs() {
	# Run SnpEff test cases: HGVS
	task cd $HOME/workspace/SnpEff/ ; \
		java -Xmx4g \
			-cp $dirSnpeff/snpEff.jar \
			org.junit.runner.JUnitCore \
			ca.mcgill.mcb.pcingola.snpEffect.testCases.TestSuiteHgvs \
			2>&1 \
			| tee $dirSnpeff/testcases.snpeff.hgvs.txt
}

#-------------------------------------------------------------------------------
# Run test cases: SnpEff-Integration
#-------------------------------------------------------------------------------

void runTestsSnpEffIntegration() {
	# Run SnpEff test cases: Integration
	task cd $HOME/workspace/SnpEff/ ; \
		java -Xmx4g \
			-cp $dirSnpeff/snpEff.jar \
			org.junit.runner.JUnitCore \
			ca.mcgill.mcb.pcingola.snpEffect.testCases.TestSuiteIntegration \
			2>&1 \
			| tee $dirSnpeff/testcases.snpeff.integration.txt
}

#-------------------------------------------------------------------------------
# Run test cases: SnpEff Unity
#-------------------------------------------------------------------------------

void runTestsSnpEffUnity() {
	# Run SnpEff test cases: Unity
	task cd $HOME/workspace/SnpEff/ ; \
		java -Xmx4g \
			-cp $dirSnpeff/snpEff.jar \
			org.junit.runner.JUnitCore \
			ca.mcgill.mcb.pcingola.snpEffect.testCases.TestSuiteUnity \
			2>&1 \
			| tee $dirSnpeff/testcases.snpeff.unity.txt
}

#-------------------------------------------------------------------------------
# Upload core files
#-------------------------------------------------------------------------------

void uploadCore2Sf() {
	zip := "snpEff_v" + versionSubUnd() + "_core.zip"
	zipLatest := "snpEff_latest_core.zip"
	sys scp -v $zip $zipLatest pcingola,snpeff@frs.sourceforge.net:/home/frs/project/s/sn/snpeff/
}

#-------------------------------------------------------------------------------
# Upload database files
#-------------------------------------------------------------------------------

void uploadDbs2Sf() {
	ver := versionUnd()
	sys scp -v $dirZip/snpEff_v$ver*.zip pcingola,snpeff@frs.sourceforge.net:/home/frs/project/s/sn/snpeff/databases/v$ver/
}

#-------------------------------------------------------------------------------
# Upload core files
#-------------------------------------------------------------------------------

void uploadDev2Sf() {
	zipDev    := "snpEff_development.zip"
	sys scp -v $zipDev pcingola,snpeff@frs.sourceforge.net:/home/frs/project/s/sn/snpeff/
}

#-------------------------------------------------------------------------------
# Upload binary files
#-------------------------------------------------------------------------------

void uploadHtml2Sf() {
	htmlDir    := "$HOME/workspace/SnpEff/html"

	# Create version file
	verFile    := "$htmlDir/versions.txt"
	println "Creating versions file: '$verFile'"
	snpEffVer  := sys $snpeff 2>&1  | grep -i "SnpEff version"  | cut -f 3,4,6 -d " " | cut -f 1 -d ")"
	snpSiftVer := sys $snpsift 2>&1 | grep -i "SnpSift version" | cut -f 3,4,6 -d " " | cut -f 1 -d ")"

	verFile.write(snpEffVer.trim().toUpper() + "\t$snpeffDownload\n" + snpSiftVer.trim().toUpper() + "\t$snpeffDownload\n");

	# Upload HTML, versions and images to SF
	println "Upload web pages"
	sys cd $htmlDir ; scp -v -r style.css *.html *.txt *.pdf images/ pcingola,snpeff@frs.sourceforge.net:htdocs/
}

#-------------------------------------------------------------------------------
# SnpEff's version 
#-------------------------------------------------------------------------------
string version() {
	if( snpEffVersion == '' ) {
		snpEffVersion = sys $snpeff -version
	}
	return snpEffVersion;
}

#-------------------------------------------------------------------------------
# SnpEff's version using underscores instead of '.'
#-------------------------------------------------------------------------------

string versionUnd() {
	ver := version()
	return ver.replace("\.","_").replaceAll("[a-zA-Z]", "").trim() # Remove sub-version letter
}

#-------------------------------------------------------------------------------
# SnpEff's version using underscores instead of '.'
#-------------------------------------------------------------------------------

string versionSubUnd() {
	ver := version()
	return ver.replace("\.","_").trim()
}

#-------------------------------------------------------------------------------
# Create bundle's ZIP files
#-------------------------------------------------------------------------------

void zipBundles() {
	println "Create bundles ZIP files"

	bundleList := "bundles.txt"
	bundleLines := sys cat $dirSnpeff/snpEff.config | grep .bundle. > $bundleList
	bundleList.rmOnExit()

	for( string bline : bundleList.read().lines() ) {
		bfields := bline.split(':')

		# Bundle name
		bname := bfields[0].trim().removeExt('.bundle')

		string[] bins
		for( string gen : bfields[1].split(' ') ) {
			bin := "$dirData/$gen/snpEffectPredictor.bin"
			if( bin.exists() ) bins.add( bin )
		}

		# Zip files
		zipList := bins.join(' ')
		zipName := "$dirZip/snpEff_v" + versionUnd() + "_" + bname + ".zip"
		if( zipName <- bins ) {
			println "\tZIP Bundle: $zipName"
			task zip $zipName $zipList
		}
	}
}

#-------------------------------------------------------------------------------
# Create SnpEff core Zip file
#-------------------------------------------------------------------------------

void zipCore() {
	ver := versionSubUnd()
	dir := "snpEff_$ver"
	sys rm -rvf $dir snpEff
	sys mkdir $dir

	# Copy core files
	sys cp -RvfL snpEff.config snpEff.jar SnpSift.jar examples galaxy scripts $dir

	# Change name to 'snpEff' (so that config file can be used out of the box)
	sys mv $dir snpEff

	# Create 'core' zip file
	zip := "snpEff_v" + ver + "_core.zip"
	zipLatest := "snpEff_latest_core.zip"
	zipDev    := "snpEff_development.zip"
	sys rm -f $zip 2> /dev/null
	task { 
		sys zip -r $zip snpEff
		sys cp $zip $zipLatest
		sys cp $zip $zipDev
	}
}

#-------------------------------------------------------------------------------
# Create databases (non-bundled) Zip files
#-------------------------------------------------------------------------------

void zipDb(string gen) {
	bin := "data/$gen/snpEffectPredictor.bin"

	# Do not create ZIP file unless database exists
	if( bin.exists() ) {
		zip := "$dirZip/snpEff_v" + versionUnd() + "_$gen.zip"
		println "\tZIP '$zip'"
		task( zip <- bin )	sys zip -r $zip data/$gen/*.bin
	} else {
		println "\tERROR: database $bin not found"
	}
}

#-------------------------------------------------------------------------------
# Create databases (non-bundled) Zip files
#-------------------------------------------------------------------------------

void zipDbs(string[] gens) {
	for( string gen : gens ) {
		zipDb(gen)
	}
}

#-------------------------------------------------------------------------------
# Create databases (non-bundled) Zip files
#-------------------------------------------------------------------------------

void zipDbs() {
	println "Create database ZIP files"
	dbList := "databases.txt"
	dbs := sys $snpeff databases | cut -f 1,4 > $dbList
	dbList.rmOnExit()

	for( string db : dbList.read().lines() ) {
		fields := db.split('\t')
		gen := fields[0].trim()
		bundle := fields[1].trim()

		# Do not zip bundled databases
		if( bundle.isEmpty() )	zipDb(gen)
	}
}

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

print("Building\n")

if( args.isEmpty() )		build()					# No arguments? Build (create JAR files)
if( bundleLists )			buildBundleLists()		# Create bundle list and config files
if( config )				buildConfig()			# Create config file
if( db )					buildDb()				# Build genomes
if( dbTest )				buildDbTest()			# Build databases used in test cases
if( distro )				makeDistro()			# Create distribution files
if( distroCore )			zipCore()				# Create distribution files (core 'zip')
if( distroBundles )			zipBundles()			# Create 'bundle' distribution files
if( download )				downloadAll()			# Perform downloads
if( make )					build()					# Build (create JAR files)
if( query )					queryUcscAll()			# Query UCSC database
if( test )					runTests()				# Run test cases 
if( testHgvs )				runTestsSnpEffHgvs()	# Run test cases (SnpEff HGVS)
if( uploadCore )			uploadCore2Sf()			# Upload 'core' files
if( uploadDbs )				uploadDbs2Sf()			# Upload all database files in 'zip' dir
if( uploadDev )				uploadDev2Sf()			# Upload 'development' version
if( uploadHtml )			uploadHtml2Sf()			# Upload html pages
if( !zipGenome.isEmpty() )	zipDbs(zipGenome)		# Zip only 'zipGenome' database

wait
print("Done\n")
