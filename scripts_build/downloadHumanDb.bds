#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data
#
#-------------------------------------------------------------------------------

clinvar            := "clinvar.vcf.gz"
urlClinVarGrch37   := "ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/$clinvar"
urlClinVarGrch38   := "ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/$clinvar"
urlDbNsfp          := "ftp://dbnsfp:dbnsfp@dbnsfp.softgenetics.com/dbNSFP$dbNsfpVer\.zip"
urlDbSnpGrch37     := "ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606_b151_GRCh37p13/VCF/00-All.vcf.gz"
urlDbSnpGrch38     := "ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/00-All.vcf.gz"
urlGwasCatalog     := "https://www.ebi.ac.uk/gwas/api/search/downloads/alternative"
urlJaspar          := "http://jaspar.binf.ku.dk/html/DOWNLOAD/JASPAR_CORE/pfm/redundant/pfm_all.txt"
urlNextProt        := "ftp://ftp.nextprot.org/pub/current_release/xml"
urlPdb             := "rsync.wwpdb.org::ftp_data/structures/divided/pdb/"

#-------------------------------------------------------------------------------
# Build dbNSFP database for genome 'hg'
#-------------------------------------------------------------------------------
void buildDbNsfp(string genome) {
	println "Building dbNsfp"
	dirDbNsfp := "$dirDb/$genome/dbNSFP"
	zip := "$dirDbNsfp/dbNSFP$dbNsfpVer\.zip"
	base := "$dirDbNsfp/dbNSFP$dbNsfpVer\_variant.chr"
	dbNsfp := "$dirDbNsfp/dbNSFP$dbNsfpVer\.txt.gz"
	if( dbNsfp.exists() ) {
		println "Building dbNsfp: File $dbNsfp exists, nothing done."
		return
	}

	println "Building dbNsfp: Unzipping file $zip"
	chrs := ['M', 'X', 'Y']
	string[] chrFiles
	for(int chrNum=1; chrNum < 23 ; chrNum++ ) chrs += "$chrNum"
	for(string chr: chrs) {
		chrFile := "$base$chr\.gz"
		chrFiles += chrFile
		println "buildDbNsfp:\tAdding chrFile '$chrFile', exists: " + chrFile.exists()
	}

	# Uncompress Zip
	# Note: Make sure the timestamp is updated (otherwise the timestamp in
	#       the zip file is used and we always run decompression)
	chrFilesStr := chrFiles.join()
	task(chrFiles <- zip) {
		sys cd $dirDbNsfp
		sys unzip -o $zip
		sys touch $chrFilesStr
	}

	println "Building dbNsfp: Sorting individual chromosome files"
	string[] txts
	header := ""
	for(string chrFile : chrFiles) {
		# Create header file
		if( header.isEmpty() ) {
			header = "$dirDb/dbNSFP$dbNsfpVer\.header"
			println "Building dbNsfp: Creating headr file 'header'"
			task(header <- chrFile) {
				sys gunzip -c $chrFile | head -n 1 > $header || true
			}
		}

		# Sort files
		base := chrFile.baseName()
		sorted := "$dirDbNsfp/$base\.sort.txt"
		txts += sorted

		println "Building dbNsfp: Sorting file $chrFile\n\tin : '$chrFile'\n\tout: '$sorted'\n\tdo: " + (sorted <- chrFile)
		task(sorted <- chrFile , cpus := 2, mem := 16*G) {
			sys gunzip -c $chrFile \
				| $dirScriptsBuild/dbNSFP_sort.pl \
				| grep -v "^#" \
				> $sorted
		}
	}

	# Compress and create index
	txtsStr := txts.join(' ')
	println "Building dbNsfp: Compressing and indexing"
	task(dbNsfp <- (txts + header)) {
		sys cat $header $txtsStr | bgzip -c > $dbNsfp
		sys tabix -s 1 -b 2 -e 2 $dbNsfp
	}
}

#-------------------------------------------------------------------------------
# Download ClinVar
#-------------------------------------------------------------------------------
void downloadClinvar() {
	println "Download Clinvar"

	# GRCh37
	dir := "$dirDb/GRCh37/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) wgetTask(urlClinVarGrch37)

	# GRCh38
	dir = "$dirDb/GRCh38/clinvar/"
	dir.mkdir()
	dir.chdir()
	if( !clinvar.exists() ) wgetTask(urlClinVarGrch38)

	wait
}

#-------------------------------------------------------------------------------
# Download dbNSFP
#-------------------------------------------------------------------------------
void downloadDbNsfp() {
	println "Download dbNSFP"

	hg := 'GRCh38'
	dir := "$dirDb/$hg/dbNSFP/"
	dir.mkdir()
	dir.chdir()

	base := "dbNSFP$dbNsfpVer"
	baseChr := "dbNSFP$dbNsfpVer"
	zip := "$base\.zip"

	# Download
	if( !zip.exists() ) {
		println "Download dbNsfp $urlDbNsfp ($zip)"
		wget(urlDbNsfp)
	} else println "downloadDbNsfp: File '$zip' exists, skipping"

	buildDbNsfp(hg)
	wait
}

#-------------------------------------------------------------------------------
# Download dbSnp
#-------------------------------------------------------------------------------
void downloadDbSnp() {
	println "Download dbSnp"

	dbsnp := "dbsnp.vcf.gz"

	# GRCh37
	dir := "$dirDb/GRCh37/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( wget(urlDbSnpGrch37) ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	} else println "downloadDbSnp: File '$dir/$dbsnp' exists, skipping"

	# GRCh38
	dir = "$dirDb/GRCh38/dbSnp/"
	dir.mkdir()
	dir.chdir()
	if( !dbsnp.exists() ) {
		if( wget(urlDbSnpGrch38) ) {
			sys cp 00-All.vcf.gz $dbsnp
		}
	} else println "downloadDbSnp: File '$dir/$dbsnp' exists, skipping"

	wait
}

#-------------------------------------------------------------------------------
# Download GWAS catalog
#-------------------------------------------------------------------------------
void downloadGwasCatalog() {
	println "Download Gwas-Catalog"

	dir := "$dirDb/gwasCatalog"
	dir.mkdir()
	dir.chdir()

	if( wget(urlGwasCatalog) ) {
		sys cat gwascatalog.txt | $dirScriptsBuild/gwascatalog2vcf.pl > gwascatalog.vcf
	}

	wait
}

#-------------------------------------------------------------------------------
# Download Jaspar
#-------------------------------------------------------------------------------
void downloadJaspar() {
	println "Download Jaspar"

	dir := "$dirDb/jaspar"
	dir.mkdir()
	dir.chdir()

	if( wget(urlJaspar) ) {
		sys gzip -c pfm_all.txt > pwms.bin
		println "Jaspar: File $dir/pwms.bin created"
	}
}

#-------------------------------------------------------------------------------
# Download NextProt
#-------------------------------------------------------------------------------
void downloadNextProt() {
	println "Download NextProt"

	dir := "$dirDb/nextProt"
	dir.mkdir()
	dir.chdir()
	
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download NextProt"

		# Download each chromosome's XML file
		for( string chr : humanChrsDd ) {
			wgetTask("$urlNextProt/nextprot_chromosome_$chr\.xml.gz")
		}

		wait
		downloadOk.write("OK")	# Mark as downlaoded OK
	} else println "downloadNextProt: Done file '$dir/$downloadOk' exists, skippping"
}

#-------------------------------------------------------------------------------
# Download PDB
#-------------------------------------------------------------------------------
void downloadPdb() {
	println "Download PDB"

	dir := "$dirDb/pdb"
	dir.mkdir()
	dir.chdir()

	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Download PDB"
		sys rsync -rlpt -v -z --delete --port=33444 $urlPdb .
		downloadOk.write("OK")	# Mark as downlaoded OK
	} else println "downloadPdb: Done file '$dir/$downloadOk' exists, skippping"
}

