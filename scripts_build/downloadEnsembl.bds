#!/usr/bin/env bds

#-------------------------------------------------------------------------------
#
# Download genome data
#
#-------------------------------------------------------------------------------

ensemblFtp         := "ftp.ensembl.org"
ensemblBfmppFtp    := "ftp.ensemblgenomes.org"

# ENSEMBL file names used a different format prior to this version
ensemblReleaseUseNumber     := 75

#-------------------------------------------------------------------------------
# Download ENSEMBL genomes
#-------------------------------------------------------------------------------
void downloadEnsembl(int ensemblRelease) {
	println "Download ENSEMBL $ensemblRelease"

	configFile := "$dirSnpEff/config/snpEff.ENSEMBL_$ensemblRelease\.config"

	doneFile := "$dirDownload/ensembl_$ensemblRelease\.done"
	if( doneFile.exists() ) {
		println "\tConfig file '$doneFile' exists: nothing done"
		return
	}

	dir := "$dirDownload/ensembl_$ensemblRelease"
	dir.mkdir()
	dir.chdir()

	#---
	# Download all files
	#---
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "Downloading ENSEMBL $ensemblRelease"

#		# Download GTF files
#		sys rsync -av	--include='*$ensemblRelease\.gtf.gz' \
#						--include='*/' \
#						--exclude='*' \
#						rsync://$ensemblFtp/ensembl/pub/release-$ensemblRelease/gtf/ \
#						.
#    
#		# Download FASTA files (reference genomes)
#		sys rsync -av	--include='*.dna.toplevel.fa.gz' \
#						--include='*.cdna.all.fa.gz' \
#						--include='*.pep.all.fa.gz' \
#						--include='*/' \
#						--exclude='*' \
#						rsync://$ensemblFtp/ensembl/pub/release-$ensemblRelease/fasta/ \
#						.

		# Download regulation tracks
		sys rsync -av	--include='*AnnotatedFeatures.gff.gz' \
						--include='*MotifFeatures.gff.gz' \
						--include='*/' \
						--exclude='*' \
						rsync://$ensemblFtp/ensembl/pub/release-$ensemblRelease/regulation/ \
						.

		downloadOk.write("OK")	# Mark as all downloads OK
	}

	#---
	# Move files to propper structure in 'local data' dir
	#---
	# Move downloaded files to current dir
	sys find . -mindepth 2 -type f -not -path "*/data/*" | xargs -I + $cp + .

	# Move files
	println 'Copying files to data dir'
	today := sys date +"%Y-%m-%d"
	string[] configLines
	for( string gtf : ".".dir("*.gtf.gz") ) {
		base := gtf.baseName('.gtf.gz')
		baseNoVer := base.removeExt()
		longName := base.split('\.').head()
		name := base.split('\.').tail().join('.')
		if( name.isEmpty() ) continue
		println "\t$name"
    
		fasta := "$baseNoVer\.dna.toplevel.fa.gz"
		cds := "$baseNoVer\.cdna.all.fa.gz"
		prot := "$baseNoVer\.pep.all.fa.gz"
		if( ensemblRelease <= ensemblReleaseUseNumber ) {
			# Slightly different name format in prior versions
			fasta = "$base\.dna.toplevel.fa.gz"
			cds = "$base\.cdna.all.fa.gz"
			prot = "$base\.pep.all.fa.gz"
		}
    
		# Copy files
		genomeDir := "$dirData/$name"
		genomeDir.mkdir()
		if( "$genomeDir/genes.gtf.gz" <- gtf )		sys $cp $gtf   $genomeDir/genes.gtf.gz
		if( "$genomeDir/cds.fa.gz" <- cds )			sys $cp $cds   $genomeDir/cds.fa.gz
		if( "$genomeDir/sequences.fa.gz" <- fasta )	sys $cp $fasta $genomeDir/sequences.fa.gz
		if( "$genomeDir/protein.fa.gz" <- prot ) {
			sys gunzip -c $prot \
					| $dirScriptsBuild/ensembl_protein_transcriptId.sh \
					| gzip -c \
					> $genomeDir/protein.fa.gz
		}
    
		# Append config lines
		configLines += "$name\.genome : $longName"
		configLines += "$name\.reference : ftp://ftp.ensembl.org/pub/release-$ensemblRelease/gtf/"
		configLines += "$name\.retrieval_date : $today"
	}

	# Regulation tracks (human and mouse only)
	genomeDir := "$dirData/$GRCH\.$ensemblRelease"
	genomeDir.mkdir()
	sys $cp homo_sapiens/AnnotatedFeatures.gff.gz $genomeDir/regulation.gff.gz
	sys $cp homo_sapiens/MotifFeatures.gff.gz $genomeDir/motif.gff.gz

	genomeDir = "$dirData/$GRCM.$ensemblRelease"
	genomeDir.mkdir()
	sys $cp mus_musculus/AnnotatedFeatures.gff.gz $genomeDir/regulation.gff.gz
	sys $cp mus_musculus/MotifFeatures.gff.gz $genomeDir/motif.gff.gz

	# Create config file
	if( configFile.exists() ) {
		println "WARNING: Config file exists, skipping ('$configFile')"
	} else {
		println "Writing config file $configFile"
		configFile.write( configLines.join("\n") )
	}

	# Create 'done' file
	doneFile.write('OK')
}

#-------------------------------------------------------------------------------
# Download ENSEMBL genomes (BFMPP)
#-------------------------------------------------------------------------------
void downloadEnsemblBfmpp() {
	println "ENSEMBL BFMPP $ensemblBfmppRelease"

	configFile := "$dirSnpEff/config/snpEff.ENSEMBL_BFMPP_$ensemblBfmppRelease\.config"

	doneFile := "$dirDownload/ensembl_bfmpp_$ensemblBfmppRelease\.done"
	if( doneFile.exists() ) {
		println "\tDone file '$doneFile' exists: nothing done"
		return
	}

	dir := "$dirDownload/ensembl_bfmpp_$ensemblBfmppRelease"
	dir.mkdir()
	dir.chdir()

	#---
	# Download all files
	#---
	downloadOk := "download.ok"
	if( ! downloadOk.exists() ) {
		println "ENSEMBL BFMPP $ensemblBfmppRelease: Downloading"

		for(string org : [ 'bacteria', 'fungi', 'metazoa', 'plants', 'protists'] ) {
			# Download GTF files (annotations)
			sys rsync -av	--include='*.$ensemblBfmppRelease\.gtf.gz' \
							--include='*/' \
							--exclude='*' \
							rsync://$ensemblBfmppFtp/all/pub/$org/release-$ensemblBfmppRelease/gtf/ \
							.
        
			# Download FASTA files (reference genomes)
			sys rsync -av	--include='*.dna.toplevel.fa.gz' \
							--include='*.cdna.all.fa.gz' \
							--include='*.pep.all.fa.gz' \
							--include='*/' \
							--exclude='*' \
							rsync://$ensemblBfmppFtp/all/pub/$org/release-$ensemblBfmppRelease/fasta/ \
							.
		}

		downloadOk.write("OK")	# Mark as all downloads OK
	} else {
		println "ENSEMBL BFMPP $ensemblBfmppRelease: File '$dir/$downloadOk' exist, skipping download"
	}

	#---
	# Move files to propper structure in 'local data' dir
	#---
	# Copy files to local dir
	println "ENSEMBL BFMPP $ensemblBfmppRelease: Copying files to parent dir"
	sys find . -mindepth 2 -type f -not -path "*/data/*" | xargs -I + $cp + .

	# Move files
	println "ENSEMBL BFMPP $ensemblBfmppRelease: Copying files to data dir"
	string[] configLines
	today := sys date +"%Y-%m-%d"
	for( string gtf : ".".dir("*.gtf.gz") ) {
		base := gtf.baseName('.gtf.gz')
		baseNoVer := base.removeExt()
		longName := base.split('\.').head()
		name := longName
		println "name: $name\tbase: $base"

		if( name.isEmpty() ) continue
		fasta := "$baseNoVer\.dna.toplevel.fa.gz"
		cds := "$baseNoVer\.cdna.all.fa.gz"
		prot := "$baseNoVer\.pep.all.fa.gz"
		println "\t$name\t$fasta\t$cds\t$prot"
        
		# Copy files (some source files might not exist)
		genomeDir := "$dirData/$name"
		genomeDir.mkdir()
		if( "$genomeDir/genes.gtf.gz" <- gtf )		sys mv -vf $gtf   $genomeDir/genes.gtf.gz    || true
		if( "$genomeDir/cds.fa.gz" <- cds )			sys mv -vf $cds   $genomeDir/cds.fa.gz       || true
		if( "$genomeDir/protein.fa.gz" <- prot )	sys mv -vf $prot  $genomeDir/protein.fa.gz   || true
		if( "$genomeDir/sequences.fa.gz" <- fasta )	sys mv -vf $fasta $genomeDir/sequences.fa.gz || true
        
		# Append config lines
		configLines += "$name\.genome : $longName"
		configLines += "$name\.reference : $ensemblBfmppFtp/pub/release-$ensemblBfmppRelease"
		configLines += "$name\.retrieval_date : $today"
	}

	# Create config file
	if( configFile.exists() ) {
		println "WARNING: Config file exists, skipping ('$configFile')"
	} else {
		println "ENSEMBL BFMPP $ensemblBfmppRelease: Writing config file $configFile"
		configFile.write( configLines.join("\n") )
	}

	# Create 'done' file
	doneFile.write('OK')
}

